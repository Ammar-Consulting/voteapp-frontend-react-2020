# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo starting...!

      # Runs a set of commands using the runners shell
      - name: Yarn Build
        run: |
          echo install yarn...
          yarn version
          yarn install
          yarn build
          mkdir deploy
          cp appspec.yml deploy/
          cp -R build deploy/

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: frontend
          path: deploy

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-west-2

      # Deploy push to AWS S3
      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name VoteApp \
          --description "VoteApp frontend" \
          --s3-location s3://cloudacademy-frontend/deploy.zip \
          --source deploy

      # Create deployment to CodeDeploy
      - name: AWS Create Deployment
        run: |
          aws deploy create-deployment \
           --application-name VoteApp \
           --deployment-config-name CodeDeployDefault.OneAtATime \
           --deployment-group-name VoteAppFrontend \
           --file-exists-behavior OVERWRITE \
           --s3-location bucket=cloudacademy-frontend,key=deploy.zip,bundleType=zip          